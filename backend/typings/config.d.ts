/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Any components in the directories configured here can be used throughout your pages, layouts (and other components) without needing to explicitly import them.
 */
export type ConfigureNuxtComponentAutoRegistration =
  | boolean
  | typeof import("../src/types/components").ComponentsOptions
  | typeof import("../src/types/components").ComponentsOptions["dirs"];
export type AutoImports = unknown;
export type ConfigureHowNuxtAutoImportsComposablesIntoYourApplication = typeof import("../src/types/imports").ImportsOptions;
export type WhetherToUseTheVueRouterIntegrationInNuxt3IfYouDoNotProvideAValueItWillBeEnabledIfYouHaveAPagesDirectoryInYourSourceFolder = boolean;
export type ManuallyDisableNuxtTelemetry = boolean;
export type PropertiesThatWillBeSetDirectlyOnVueConfigForVue2 = typeof import("vue/types/vue").VueConfiguration;
export type OptionsForTheVueCompilerThatWillBePassedAtBuildTime = typeof import("@vue/compiler-core").CompilerOptions;
/**
 * This can be set at runtime by setting the NUXT_APP_BASE_URL environment variable.
 */
export type TheBasePathOfYourNuxtApplication = string;
export type TheFolderNameForTheBuiltSiteAssetsRelativeToBaseURLOrCdnURLIfSetThisIsSetAtBuildTimeAndShouldNotBeCustomizedAtRuntime = string;
export type TheFolderNameForTheBuiltSiteAssetsRelativeToBaseURLOrCdnURLIfSet = unknown;
/**
 * This can be set to a different value at runtime by setting the `NUXT_APP_CDN_URL` environment variable.
 */
export type AnAbsoluteURLToServeThePublicFolderFromProductionOnly = string;
export type SetDefaultConfigurationForHeadOnEveryPage = typeof import("../src/types/config").NuxtAppConfig["head"];
/**
 * This can be overridden with `definePageMeta` on an individual page. Only JSON-serializable values are allowed.
 */
export type DefaultValuesForLayoutTransitions = typeof import("../src/types/config").NuxtAppConfig["layoutTransition"];
/**
 * This can be overridden with `definePageMeta` on an individual page. Only JSON-serializable values are allowed.
 */
export type DefaultValuesForPageTransitions = typeof import("../src/types/config").NuxtAppConfig["pageTransition"];
/**
 * This can be overridden with `definePageMeta` on an individual page. Only JSON-serializable values are allowed.
 */
export type DefaultValuesForKeepAliveConfigurationBetweenPages = typeof import("../src/types/config").NuxtAppConfig["keepalive"];
export type ThePathToAnHTMLTemplateFileForRenderingNuxtResponsesUsesSrcDirAppHtmlIfItExistsOrTheNuxtSDefaultTemplateIfNot = string;
/**
 * By default, it is enabled if there is a `store/` directory.
 */
export type EnableOrDisableVuexStore = boolean;
export type OptionsToPassDirectlyToVueMeta = typeof import("vue-meta").VueMetaOptions;
export type SetDefaultConfigurationForHeadOnEveryPage1 = typeof import("vue-meta").MetaInfo;
export type Meta = typeof import("../src/types/meta").MetaObject;
export type WhetherToEnableFetchOnTheServer = boolean;
export type WhetherToEnableFetchOnTheClient = boolean;
/**
 * Each plugin can be a string (which can be an absolute or relative path to a file). If it ends with `.client` or `.server` then it will be automatically loaded only in the appropriate context.
 * It can also be an object with `src` and `mode` keys.
 */
export type AnArrayOfNuxtAppPlugins = (typeof import("../src/types/nuxt").NuxtPlugin | string)[];
export type YouMayWantToExtendPluginsOrChangeTheirOrderForThisYouCanPassAFunctionUsingExtendPluginsItAcceptsAnArrayOfPluginObjectsAndShouldReturnAnArrayOfPluginObjects = (
  plugins: Array<{src: string; mode?: "client" | "server"}>
) => Array<{src: string; mode?: "client" | "server"}>;
/**
 * Nuxt will automatically guess the file type by its extension and use the appropriate pre-processor. You will still need to install the required loader if you need to use them.
 */
export type YouCanDefineTheCSSFilesModulesLibrariesYouWantToSetGloballyIncludedInEveryPage = string[];
/**
 * Normally, there is no need to configure this directly.
 */
export type AnObjectWhereEachKeyNameMapsToAPathToALayoutVueFile = Record<string, string>;
/**
 * Normally, there is no need to configure this directly.
 */
export type SetACustomErrorPageLayout = string;
export type CSSColorOfTheProgressBar = string;
export type CSSColorOfTheProgressBarWhenAnErrorAppendedWhileRenderingTheRouteIfDataOrFetchSentBackAnErrorForExample = string;
export type HeightOfTheProgressBarUsedInTheStylePropertyOfTheProgressBar = string;
export type InMsWaitForTheSpecifiedTimeBeforeDisplayingTheProgressBarUsefulForPreventingTheBarFromFlashing = number;
export type InMsTheMaximumDurationOfTheProgressBarNuxtAssumesThatTheRouteWillBeRenderedBefore5Seconds = number;
export type KeepAnimatingProgressBarWhenLoadingTakesLongerThanDuration = boolean;
export type SetTheDirectionOfTheProgressBarFromRightToLeft = boolean;
export type SetToFalseToRemoveDefaultProgressBarStylesAndAddYourOwn = boolean;
export type SetToFalseToDisableNuxtVuexIntegration = boolean;
export type SetToFalseToDisableLayouts = boolean;
export type SetToFalseToDisableNuxtIntegrationWithVueMetaAndTheHeadProperty = boolean;
export type SetToFalseToDisableMiddleware = boolean;
export type SetToFalseToDisableTransitions = boolean;
export type SetToFalseToDisableSupportForDeprecatedFeaturesAndAliases = boolean;
export type SetToFalseToDisableTheNuxtValidateHook = boolean;
export type SetToFalseToDisableTheNuxtAsyncDataHook = boolean;
export type SetToFalseToDisableTheNuxtFetchHook = boolean;
export type SetToFalseToDisable$NuxtIsOnline = boolean;
export type SetToFalseToDisablePrefetchingBehaviorInNuxtLink = boolean;
export type SetToFalseToDisableExtraComponentAliasesLikeNLinkAndNChild = boolean;
export type SetToFalseToDisableTheClientOnlyComponentSeeDocsHttpsGithubComEgoistVueClientOnly = boolean;
/**
 * Value should be either a string or array of strings pointing to source directories or config path relative to current config.
 * You can use `github:`, `gitlab:`, `bitbucket:` or `https://` to extend from a remote git repository.
 */
export type ExtendProjectFromMultipleLocalOrRemoteSources = string | string[];
/**
 * Value should be a string pointing to source directory or config path relative to current config.
 * You can use `github:`, `gitlab:`, `bitbucket:` or `https://` to extend from a remote git repository.
 */
export type ExtendProjectFromALocalOrRemoteSource = string;
/**
 * This property can be overwritten (for example, running `nuxt ./my-app/` will set the `rootDir` to the absolute path of `./my-app/` from the current/working directory.
 * It is normally not needed to configure this option.
 */
export type DefineTheRootDirectoryOfYourApplication = string;
/**
 * Often this is used when in a monorepo setup. Nuxt will attempt to detect your workspace directory automatically, but you can override it here.
 * It is normally not needed to configure this option.
 */
export type DefineTheWorkspaceDirectoryOfYourApplication = string;
/**
 * If a relative path is specified, it will be relative to the `rootDir`.
 */
export type DefineTheSourceDirectoryOfYourNuxtApplication = string;
/**
 * Many tools assume that `.nuxt` is a hidden directory (because it starts with a `.`). If that is a problem, you can use this option to prevent that.
 */
export type DefineTheDirectoryWhereYourBuiltNuxtFilesWillBePlaced = string;
/**
 * Normally, you should not need to set this.
 */
export type WhetherNuxtIsRunningInDevelopmentMode = boolean;
export type WhetherYourAppIsBeingUnitTested = boolean;
/**
 * By default, it's only enabled in development mode.
 */
export type SetToTrueToEnableDebugMode = boolean;
export type SetTheMethodNuxtUsesToRequireModulesSuchAsLoadingNuxtConfigServerMiddlewareAndSoOnDefaultingToJitiWhichHasSupportForTypeScriptAndESMSyntax =
  | "jiti"
  | "native"
  | ((p: string | {filename: string}) => NodeRequire);
/**
 * This is unrelated to `ssr`.
 */
export type WhetherYourNuxtAppShouldBeBuiltToBeServedByTheNuxtServerServerOrAsStaticHTMLFilesSuitableForACDNOrOtherStaticFileServerStatic =
  | "server"
  | "static";
export type WhetherToEnableRenderingOfHTMLEitherDynamicallyInServerModeOrAtGenerateTimeIfSetToFalseAndCombinedWithStaticTargetGeneratedPagesWillSimplyDisplayALoadingScreenWithNoContent = boolean;
export type Mode = string;
/**
 * Set to `'server'` to enable server mode, where the Nuxt server checks browser version based on the user agent and serves the correct bundle.
 * Set to `'client'` to serve both the modern bundle with `<script type="module">` and the legacy bundle with `<script nomodule>`. It will also provide a `<link rel="modulepreload">` for the modern bundle. Every browser that understands the module type will load the modern bundle while older browsers fall back to the legacy (transpiled) bundle.
 * If you have set `modern: true` and are generating your app or have `ssr: false`, modern will be set to `'client'`.
 * If you have set `modern: true` and are serving your app, modern will be set to `'server'`.
 */
export type WhetherToProduceASeparateModernBuildTargetingBrowsersThatSupportESModules = "server" | "client" | boolean;
/**
 * Each module is either a string (which can refer to a package, or be a path to a file), a tuple with the module as first string and the options as a second object, or an inline module function.
 * Nuxt tries to resolve each item in the modules array using node require path (in `node_modules`) and then will be resolved from project `srcDir` if `~` alias is used.
 */
export type ModulesAreNuxtExtensionsWhichCanExtendItsCoreFunctionalityAndAddEndlessIntegrations = (
  | typeof import("../src/types/module").NuxtModule
  | string
  | [typeof import("../src/types/module").NuxtModule | string, Record<string, any>]
)[];
/**
 * Modules are Nuxt extensions which can extend its core functionality and add endless integrations.
 * Each module is either a string (which can refer to a package, or be a path to a file), a tuple with the module as first string and the options as a second object, or an inline module function.
 * Nuxt tries to resolve each item in the modules array using node require path (in `node_modules`) and then will be resolved from project `srcDir` if `~` alias is used.
 */
export type ModulesThatAreOnlyRequiredDuringDevelopmentAndBuildTime = (
  | typeof import("../src/types/module").NuxtModule
  | string
  | [typeof import("../src/types/module").NuxtModule | string, Record<string, any>]
)[];
/**
 *  @private
 */
export type BuiltInAdHocModules = unknown[];
export type InstalledModuleMetadata = unknown[];
export type AllowsCustomizingTheGlobalIDUsedInTheMainHTMLTemplateAsWellAsTheMainVueInstanceNameAndOtherOptions = string;
export type GlobalsId = (globalName: string) => string;
export type GlobalsNuxt = (globalName: string) => string;
export type GlobalsContext = (globalName: string) => string;
export type GlobalsPluginPrefix = (globalName: string) => string;
export type GlobalsReadyCallback = (globalName: string) => string;
export type GlobalsLoadedCallback = (globalName: string) => string;
/**
 * By adding entries to `serverMiddleware` you can register additional routes without the need for an external server.
 * You can pass a string, which can be the name of a node dependency or a path to a file. You can also pass an object with `path` and `handler` keys (`handler` can be a path or a function).
 */
export type ServerMiddlewareAreConnectExpressH3ShapedFunctionsThatHandleServerSideRequestsTheyRunOnTheServerAndBeforeTheVueRenderer = unknown[];
/**
 * The configuration path is relative to `options.rootDir` (default is current working directory).
 * Setting this field may be necessary if your project is organized as a yarn workspace-styled mono-repository.
 */
export type UsedToSetTheModulesDirectoriesForPathResolvingForExampleWebpackSResolveLoadingNodeExternalsAndPostcss = string[];
export type TheAssetsDirectoryAliasedAsAssetsInYourBuild = string;
export type TheDirectoryContainingAppTemplateFilesLikeAppHtmlAndRouterScrollBehaviorJs = string;
export type TheLayoutsDirectoryEachFileOfWhichWillBeAutoRegisteredAsANuxtLayout = string;
export type TheMiddlewareDirectoryEachFileOfWhichWillBeAutoRegisteredAsANuxtMiddleware = string;
export type TheDirectoryWhichWillBeProcessedToAutoGenerateYourApplicationPageRoutes = string;
export type TheDirectoryContainingYourStaticFilesWhichWillBeDirectlyAccessibleViaTheNuxtServerAndCopiedAcrossIntoYourDistFolderWhenYourAppIsGenerated = string;
export type DirStatic = string;
export type TheFolderWhichWillBeUsedToAutoGenerateYourVuexStoreStructure = string;
export type TheExtensionsThatShouldBeResolvedByTheNuxtResolver = string[];
export type TheStyleExtensionsThatShouldBeResolvedByTheNuxtResolverForExampleInCssProperty = string[];
export type YouCanImproveYourDXByDefiningAdditionalAliasesToAccessCustomDirectoriesWithinYourJavaScriptAndCSS = Record<
  string,
  string
>;
export type PassOptionsDirectlyToNodeIgnoreWhichIsUsedByNuxtToIgnoreFiles = unknown;
export type AnyFileInPagesLayoutsMiddlewareOrStoreWillBeIgnoredDuringBuildingIfItsFilenameStartsWithThePrefixSpecifiedByIgnorePrefix = string;
export type MoreCustomizableThanIgnorePrefixAllFilesMatchingGlobPatternsSpecifiedInsideTheIgnoreArrayWillBeIgnoredInBuilding = string[];
/**
 * `chokidar` is used to set up the watchers. To learn more about its pattern options, see chokidar documentation.
 */
export type TheWatchPropertyLetsYouWatchCustomFilesForRestartingTheServer = string[];
export type AnArrayOfEventTypesWhichWhenReceivedWillCauseTheWatcherToRestart = unknown;
export type YourPreferredCodeEditorToLaunchWhenDebugging = string;
/**
 * Internally, hooks follow a naming pattern using colons (e.g., build:done).
 * For ease of configuration, you can also structure them as an hierarchical object in `nuxt.config` (as below).
 */
export type HooksAreListenersToNuxtEventsThatAreTypicallyUsedInModulesButAreAlsoAvailableInNuxtConfig = typeof import("../src/types/hooks").NuxtHooks;
/**
 * The value of this object is accessible from server only using `useRuntimeConfig`.
 * It mainly should hold _private_ configuration which is not exposed on the frontend. This could include a reference to your API secret tokens.
 * Anything under `public` and `app` will be exposed to the frontend as well.
 * Values are automatically replaced by matching env variables at runtime, e.g. setting an environment variable `NUXT_API_KEY=my-api-key NUXT_PUBLIC_BASE_URL=/foo/` would overwrite the two values in the example below.
 */
export type RuntimeConfigAllowsPassingDynamicConfigAndEnvironmentVariablesToTheNuxtAppContext = typeof import("../src/types/config").RuntimeConfig;
export type PrivateRuntimeConfig = typeof import("../src/types/config").PrivateRuntimeConfig;
export type PublicRuntimeConfig = typeof import("../src/types/config").PublicRuntimeConfig;
/**
 * For programmatic usage and type support, you can directly provide app config with this option. It will be merged with `app.config` file as default value.
 */
export type AdditionalAppConfiguration = typeof import("../src/types/config").AppConfig;
export type MajorVersion = number;
export type LegacyGenerate = boolean;
export type Start = boolean;
export type Build = boolean;
export type Generate = boolean;
export type Prepare = boolean;
export type Cli = boolean;
export type RequiredModules = unknown;
export type NuxtConfigFile = unknown;
export type NuxtConfigFiles = unknown[];
export type AppDir = string;
export type PathToPostcssConfigFile = boolean;
/**
 * https://postcss.org/
 */
export type OptionsForConfiguringPostCSSPlugins = Record<string, any>;
export type TypeScriptComesWithCertainChecksToGiveYouMoreSafetyAndAnalysisOfYourProgramOnceYouVeConvertedYourCodebaseToTypeScriptYouCanStartEnablingTheseChecksForGreaterSafetyReadMoreHttpsWwwTypescriptlangOrgDocsHandbookMigratingFromJavascriptHtmlGettingStricterChecks = boolean;
/**
 * If set to true, this will type check in development. You can restrict this to build-time type checking by setting it to `build`.
 */
export type EnableBuildTimeTypeChecking = boolean | "build";
export type YouCanExtendGeneratedNuxtTsconfigJsonUsingThisOption = typeof import("pkg-types")["readPackageJSON"];
/**
 * We recommend instead either enabling [**Take Over Mode**](https://github.com/johnsoncodehk/volar/discussions/471) or adding **TypeScript Vue Plugin (Volar)** 👉 [[Download](https://marketplace.visualstudio.com/items?itemName=johnsoncodehk.vscode-typescript-vue-plugin)].
 */
export type GenerateAVueShim = boolean;
/**
 * See https://vitejs.dev/config for more information. Please note that not all vite options are supported in Nuxt.
 */
export type ConfigurationThatWillBePassedDirectlyToVite = typeof import("../src/types/config").ViteConfig;
/**
 * Set to `true` to enable bundle analysis, or pass an object with options: [for webpack](https://github.com/webpack-contrib/webpack-bundle-analyzer#options-for-plugin) or [for vite](https://github.com/btd/rollup-plugin-visualizer#options).
 */
export type NuxtUsesWebpackBundleAnalyzerToVisualizeYourBundlesAndHowToOptimizeThem =
  | boolean
  | typeof import("webpack-bundle-analyzer").BundleAnalyzerPlugin.Options;
/**
 * It is normally enabled by CLI argument `--profile`.
 */
export type EnableTheProfilerInWebpackbar = boolean;
/**
 * Using [extract-css-chunks-webpack-plugin](https://github.com/faceyspacey/extract-css-chunks-webpack-plugin/) under the hood, your CSS will be extracted into separate files, usually one per component. This allows caching your CSS and JavaScript separately and is worth trying if you have a lot of global or shared CSS.
 */
export type EnablesCommonCSSExtractionUsingVueServerRendererGuidelinesHttpsSsrVuejsOrgGuideCssHtml =
  | boolean
  | typeof import("mini-css-extract-plugin").PluginOptions;
export type EnablesCSSSourceMapSupportDefaultsToTrueInDevelopment = boolean;
/**
 * Defaults to `'url'` ([see package](https://www.npmjs.com/package/url)).
 */
export type ThePolyfillLibraryToLoadToProvideURLAndURLSearchParams = string;
export type WebpackLoadersPugPlain = unknown;
export type WebpackLoadersVueProductionMode = boolean;
export type WebpackLoadersLess = unknown;
export type WebpackLoadersScss = unknown;
export type WebpackLoadersStylus = unknown;
export type WebpackLoadersVueStyle = unknown;
export type AddWebpackPlugins = unknown[];
/**
 * Set to false to disable this plugin, or pass an object of options.
 */
export type TerserPluginOptions =
  | false
  | (typeof import("terser-webpack-plugin").BasePluginOptions &
      typeof import("terser-webpack-plugin").DefinedDefaultMinimizerAndOptions<any>);
export type HardReplacesTypeofProcessTypeofWindowAndTypeofDocumentToTreeShakeBundle = boolean;
/**
 * Defaults to true when `extractCSS` is enabled.
 */
export type OptimizeCSSAssetsPluginOptions =
  | false
  | (typeof import("css-minimizer-webpack-plugin").BasePluginOptions &
      typeof import("css-minimizer-webpack-plugin").DefinedDefaultMinimizerAndOptions<any>);
export type ConfigureWebpackOptimizationHttpsWebpackJsOrgConfigurationOptimization =
  | false
  | typeof import("webpack").Configuration["optimization"];
export type WebpackPostcssPostcssOptionsConfig = boolean;
export type SeeWebpackDevMiddlewareHttpsGithubComWebpackWebpackDevMiddlewareForAvailableOptions = typeof import("webpack-dev-middleware").Options<
  typeof import("http").IncomingMessage,
  typeof import("http").ServerResponse
>;
export type SeeWebpackHotMiddlewareHttpsGithubComWebpackContribWebpackHotMiddlewareForAvailableOptions = typeof import("webpack-hot-middleware").MiddlewareOptions & {
  client?: typeof import("webpack-hot-middleware").ClientOptions;
};
export type SetToFalseToDisableTheOverlayProvidedByFriendlyErrorsWebpackPluginHttpsGithubComNuxtFriendlyErrorsWebpackPlugin = boolean;
export type FiltersToHideBuildWarnings = Array<(warn: typeof import("webpack").WebpackError) => boolean>;
export type ConfigurationForNitro = typeof import("nitropack")["NitroConfig"];
/**
 * Each handler accepts the following options: - handler: The path to the file defining the handler. - route: The route under which the handler is available. This follows the conventions of https://github.com/unjs/radix3. - method: The HTTP method of requests that should be handled. - middleware: Specifies whether it is a middleware handler. - lazy: Specifies whether to use lazy loading to import the handler.
 */
export type NitroServerHandlers = typeof import("nitropack")["NitroEventHandler"][];
export type NitroDevelopmentOnlyServerHandlers = typeof import("nitropack")["NitroDevEventHandler"][];
export type SetToTrueToGenerateAnAsyncEntryPointForTheVueBundleForModuleFederationSupport = boolean;
export type EnableVueSReactivityTransform = boolean;
export type ExternalizeVueVueAndVueRouterWhenBuilding = boolean;
export type TreeShakesContentsOfClientOnlyComponentsFromServerBundle = boolean;
export type UseViteNodeForOnDemandServerChunkLoading = boolean;
export type SplitServerBundleIntoMultipleChunksAndDynamicallyImportThem = boolean;
/**
 * You can also pass a function that receives the path of a Vue component and returns a boolean indicating whether to inline the styles for that component.
 */
export type InlineStylesWhenRenderingHTMLCurrentlyViteOnly = boolean | ((id?: string) => boolean);
export type TurnOffRenderingOfNuxtScriptsAndJSResourceHints = boolean;
export type TheBuilderToUseForBundlingTheVuePartOfYourApplication =
  | "vite"
  | "webpack"
  | {bundle: (nuxt: typeof import("../src/types/nuxt").Nuxt) => Promise<void>};
export type WhetherToGenerateSourcemaps = boolean | {server?: boolean; client?: boolean};
/**
 * It is enabled by default when a CI or test environment is detected.
 */
export type SuppressesMostOfTheBuildOutputLog = boolean;
/**
 * Set to `true` to enable bundle analysis, or pass an object with options: [for webpack](https://github.com/webpack-contrib/webpack-bundle-analyzer#options-for-plugin) or [for vite](https://github.com/btd/rollup-plugin-visualizer#options).
 */
export type NuxtUsesWebpackBundleAnalyzerToVisualizeYourBundlesAndHowToOptimizeThem1 =
  | boolean
  | typeof import("webpack-bundle-analyzer").BundleAnalyzerPlugin.Options
  | typeof import("rollup-plugin-visualizer").PluginVisualizerOptions;
/**
 * It is normally enabled by CLI argument `--profile`.
 */
export type EnableTheProfilerInWebpackbar1 = boolean;
/**
 * Using [extract-css-chunks-webpack-plugin](https://github.com/faceyspacey/extract-css-chunks-webpack-plugin/) under the hood, your CSS will be extracted into separate files, usually one per component. This allows caching your CSS and JavaScript separately and is worth trying if you have a lot of global or shared CSS.
 */
export type EnablesCommonCSSExtractionUsingVueServerRendererGuidelinesHttpsSsrVuejsOrgGuideCssHtml1 = boolean;
export type CreatesSpecialWebpackBundleForSSRRendererItIsNormallyNotNecessaryToChangeThisValue = unknown;
export type EnableThreadLoaderHttpsGithubComWebpackContribThreadLoaderThreadLoaderWhenBuildingAppWithWebpack = boolean;
export type EnableCachingForTerserWebpackPluginHttpsGithubComWebpackContribTerserWebpackPluginOptionsAndCacheLoaderHttpsGithubComWebpackContribCacheLoaderCacheLoader = boolean;
/**
 * This mode bundles `node_modules` that are normally preserved as externals in the server build.
 */
export type InlineServerBundleDependencies = boolean;
export type IfYouAreUploadingYourDistFilesToACDNYouCanSetThePublicPathToYourCDN = unknown;
/**
 * Defaults to `'url'` ([see package](https://www.npmjs.com/package/url)).
 */
export type ThePolyfillLibraryToLoadToProvideURLAndURLSearchParams1 = string;
/**
 * To understand a bit more about the use of manifests, take a look at [this webpack documentation](https://webpack.js.org/guides/code-splitting/).
 */
export type CustomizeBundleFilenames1 = Record<string, (arg: any) => string>;
export type BuildLoadersPugPlain = unknown;
export type BuildLoadersVueProductionMode = boolean;
export type BuildLoadersLess = unknown;
export type BuildLoadersScss = unknown;
export type BuildLoadersStylus = unknown;
export type BuildLoadersVueStyle = unknown;
export type BuildStyleResources = unknown;
export type AddWebpackPlugins1 = unknown[];
/**
 * Set to false to disable this plugin, or pass an object of options.
 */
export type TerserPluginOptions1 = unknown;
export type EnablesTheHardSourceWebpackPluginHttpsGithubComMzgoddardHardSourceWebpackPluginForImprovedCaching = boolean;
export type HardReplacesTypeofProcessTypeofWindowAndTypeofDocumentToTreeShakeBundle1 = boolean;
/**
 * Defaults to true when `extractCSS` is enabled.
 */
export type OptimizeCSSAssetsPluginOptions1 = boolean;
export type SetMinimizeToFalseToDisableAllMinimizersItIsDisabledInDevelopmentByDefault = boolean;
export type YouCanSetMinimizerToACustomizedArrayOfPlugins = unknown;
export type BuildOptimizationSplitChunksCacheGroups = unknown;
export type NuxtWillAutomaticallyDetectTheCurrentVersionOfCoreJsInYourProjectAutoOrYouCanSpecifyWhichVersionYouWantToUse2Or3 = string;
/**
 * For more information see [Babel plugins options](https://babeljs.io/docs/en/options#plugins) and [babel-loader options](https://github.com/babel/babel-loader#options).
 */
export type AnArrayOfBabelPluginsToLoadOrAFunctionThatTakesWebpackContextAndReturnsAnArrayOfBabelPlugins = unknown[];
export type TheBabelPresetsToBeApplied = unknown;
export type BuildBabelCacheDirectory = boolean;
/**
 * You can also use a function to conditionally transpile. The function will receive an object ({ isDev, isServer, isClient, isModern, isLegacy }).
 */
export type IfYouWantToTranspileSpecificDependenciesWithBabelYouCanAddThemHereEachItemInTranspileCanBeAPackageNameAFunctionAStringOrRegexObjectMatchingTheDependencySFileName = Array<
  string | RegExp | Function
>;
export type AllowsSettingADifferentAppTemplateOtherThanNuxtVueApp = unknown;
/**
 * Templates are rendered using [`lodash.template`](https://lodash.com/docs/4.17.15#template).
 */
export type YouCanProvideYourOwnTemplatesWhichWillBeRenderedBasedOnNuxtConfigurationThisFeatureIsSpeciallyUsefulForUsingWithModules = unknown[];
/**
 * This feature is especially useful for using with modules.
 */
export type YouCanProvideYourCustomFilesToWatchAndRegenerateAfterChanges = unknown[];
export type SeeWebpackHotMiddlewareHttpsGithubComWebpackContribWebpackHotMiddlewareForAvailableOptions1 = unknown;
export type SetToFalseToDisableTheOverlayProvidedByFriendlyErrorsWebpackPluginHttpsGithubComNuxtFriendlyErrorsWebpackPlugin1 = boolean;
export type AdditionalExtensionsBeyondVueJsToSupportInPagesLayoutsMiddlewareEtc = unknown[];
export type FiltersToHideBuildWarnings1 = unknown[];
export type SetToTrueToScanFilesWithinSymlinksInTheBuildSuchAsWithinPages = boolean;
export type TheTextThatDisplaysOnTheNuxtLoadingIndicatorWhenSsrFalse = string;
export type The404TextOnTheDefaultNuxtErrorPage = string;
export type TheTextToDisplayOnTheDefaultNuxtErrorPageWhenThereHasBeenAServerError = string;
export type TheTextLinkedToNuxtjsOrgThatAppearsOnTheBuiltInNuxtErrorPage = string;
export type TheTextLinkedToTheHomePageThatAppearsOnTheBuiltInNuxtErrorPage = string;
export type TheMessageThatWillDisplayOnAWhiteScreenIfTheBuiltInNuxtErrorPageCanTBeRendered = string;
export type TheDefaultErrorTitleIfThereIsnTASpecificErrorMessageOnTheBuiltInNuxtErrorPage = string;
export type TheErrorMessageInDebugModeOnTheBuiltInNuxtErrorPage = string;
export type EnabledByDefaultForDevelopment = boolean;
export type ConfigureTheCrossoriginAttributeOnLinkRelStylesheetAndScriptTagsInGeneratedHTMLMoreInformationHttpsDeveloperMozillaOrgEnUSDocsWebHTMLAttributesCrossorigin = unknown;
export type AddsPrefetchAndPreloadLinksForFasterInitialPageLoadTimeYouProbablyDonTWantToDisableThisOptionUnlessYouHaveManyPagesAndRoutes = boolean;
/**
 * This option is automatically set based on global SSR value if not provided. This can be useful to dynamically enable/disable SSR at runtime after image builds (with docker, for example).
 */
export type WhetherToEnableRenderingOfHTMLEitherDynamicallyInServerModeOrAtGenerateTime = unknown;
/**
 * Set to `collapsed` to collapse the logs, or `false` to disable.
 */
export type ForwardServerSideLogsToTheBrowserForBetterDebuggingOnlyAvailableInDevelopment = boolean;
export type SetToTrueToEnableHTTP2PushHeaders = boolean;
export type RenderHttp2ShouldPush = unknown;
/**
 * You can add your own assets to the array as well. Using `req` and `res` you can decide what links to push based on the request headers, for example using the cookie with application version.
 * Assets will be joined together with `,` and passed as a single `Link` header.
 */
export type YouCanControlWhatLinksToPushUsingThisFunctionItReceivesReqResPublicPathAndAPreloadFilesArray = unknown;
export type WhetherToAddTheRouterBaseToYourStaticAssets = boolean;
/**
 * Set to `false` to disable compression. You can also pass an object of options for [compression middleware](https://www.npmjs.com/package/compression), or use your own middleware by passing it in directly - for example, `otherComp({ myOptions: 'example' })`.
 */
export type ConfigureServerCompression = boolean | object | Function;
/**
 * Set to `true` to enable, or you can pass options to fine-tune your CSP options.
 * **Prerequisites**: These CSP settings are only effective when using Nuxt with `mode: 'server'` to serve your SSR application.
 * **Updating settings**: These settings are read by the Nuxt server directly from `nuxt.config`. This means changes to these settings take effect when the server is restarted. There is no need to rebuild the application to update CSP settings.
 */
export type UseThisToConfigureContentSecurityPolicyToLoadExternalResourcesReadMoreHttpsDeveloperMozillaOrgEnUSDocsWebHTTPCSP = boolean;
export type ForRoutesMatchingThePublicPathNuxtDisableBySettingToFalse = unknown;
/**
 * Note: Only JSON serializable options should be passed by nuxt config.
 * For more control, you can use `app/router.optionts.ts` file.
 */
export type AdditionalOptionsPassedToVueRouter = import("../src/types/router").RouterConfigSerializable;
/**
 * For server-side rendering it is not recommended to change it.
 */
export type ConfigureTheRouterMode = string;
/**
 * This can be useful if you need to serve Nuxt as a different context root, from within a bigger web site.
 */
export type TheBaseURLOfTheAppForExampleIfTheEntireSinglePageApplicationIsServedUnderAppThenBaseShouldUseTheValueApp = string;
export type RouterRouterBaseSpecified = boolean;
export type RouterRoutes = unknown[];
/**
 * Imagine we have the page file `pages/posts/_id.vue`. Nuxt will generate the route name programmatically, in this case `posts-id`. If you change the routeNameSplitter config to `/` the name will change to `posts/id`.
 */
export type ThisAllowsChangingTheSeparatorBetweenRouteNamesThatNuxtUses = string;
export type SetTheDefaultSMiddlewareForEveryPageOfTheApplication = unknown[];
export type GloballyConfigureNuxtLinkDefaultActiveClass = string;
export type GloballyConfigureNuxtLinkDefaultExactActiveClass = string;
export type GloballyConfigureNuxtLinkDefaultPrefetchClassFeatureDisabledByDefault = boolean;
export type YouCanPassAFunctionToExtendTheRoutesCreatedByNuxt = unknown;
export type TheScrollBehaviorOptionLetsYouDefineACustomBehaviorForTheScrollPositionBetweenTheRoutesThisMethodIsCalledEveryTimeAPageIsRenderedToLearnMoreAboutItSeeTheVueRouterDocumentation = unknown;
export type ProvideCustomQueryStringParseFunctionOverridesTheDefault = boolean;
export type ProvideCustomQueryStringStringifyFunctionOverridesTheDefault = boolean;
/**
 * Setting this to `false` essentially makes every router-link navigation a full page refresh in IE9. This is useful when the app is server-rendered and needs to work in IE9, because a hash mode URL does not work with SSR.
 */
export type ControlsWhetherTheRouterShouldFallBackToHashModeWhenTheBrowserDoesNotSupportHistoryPushStateButModeIsSetToHistory = boolean;
export type ConfigureNuxtLinkToPrefetchTheCodeSplittedPageWhenDetectedWithinTheViewportRequiresIntersectionObserverHttpsDeveloperMozillaOrgEnUSDocsWebAPIIntersection_Observer_APIToBeSupportedSeeCaniuseHttpsCaniuseComIntersectionobserver = boolean;
/**
 * With this option enabled, Nuxt will automatically prefetch the payload of the linked page when the `<nuxt-link>` is visible in the viewport, making instant navigation.
 */
export type WhenUsingNuxtGenerateWithTargetStaticNuxtWillGenerateAPayloadJsForEachPage = boolean;
export type IfThisOptionIsSetToTrueTrailingSlashesWillBeAppendedToEveryRouteIfSetToFalseTheyLlBeRemoved = unknown;
export type WhetherToEnableHTTPS = boolean;
export type ServerPort = number;
export type ServerHost = string;
export type ServerSocket = unknown;
export type AddAMessageToTheCLIBannerByAddingAStringToThisArray = string[];
export type ChangeTheColorOfTheNuxtJsTitleInTheCLIBanner = string;
export type DirectoryNameThatHoldsAllTheAssetsAndGeneratedPagesForAStaticBuild = string;
/**
 * If you are using the crawler, this will be only the starting point for route generation. This is often necessary when using dynamic routes.
 * It can be an array or a function.
 */
export type TheRoutesToGenerate = unknown[];
export type AnArrayOfStringOrRegularExpressionsThatWillPreventGenerationOfRoutesMatchingThemTheRoutesWillStillBeAccessibleWhenFallbackIsSet = unknown[];
export type TheNumberOfRoutesThatAreGeneratedConcurrentlyInTheSameThread = number;
export type IntervalInMillisecondsBetweenTwoRenderCyclesToAvoidFloodingAPotentialAPIWithCalls = number;
export type SetToFalseToDisableCreatingADirectoryIndexHtmlForEachRoute = boolean;
/**
 * Set this as the error page in your static server configuration, so that unknown routes can be rendered (on the client-side) by Nuxt.
 * * If unset or set to a falsy value, the name of the fallback HTML file will be `200.html`. * If set to `true`, the filename will be `404.html`. * If you provide a string as a value, it will be used instead.
 */
export type ThePathToTheFallbackHTMLFile = string;
export type SetToFalseToDisableGeneratingPagesDiscoveredThroughCrawlingRelativeLinksInGeneratedPages = boolean;
export type SetToFalseToDisableGeneratingAManifestJsWithAListOfAllGeneratedPages = boolean;
export type SetToFalseToDisableGeneratingANojekyllFileWhichAidsCompatibilityWithGitHubPages = boolean;
export type AnArrayOfFilesOrDirectoriesToIgnoreItCanAlsoBeAFunctionThatReturnsAnArray = unknown[];
export type TheDirectoryUnderneathNuxtWhereStaticAssetsPayloadStateAndManifestFilesWillLive = string;
export type TheFullPathToTheDirectoryUnderneathNuxtWhereStaticAssetsPayloadStateAndManifestFilesWillLive = string;
export type TheFullPathToTheVersionedDirectoryWhereStaticAssetsForTheCurrentBuildAreLocated = string;
export type AUniqueStringToUniquelyIdentifyPayloadVersionsDefaultsToTheCurrentTimestamp = string;

export interface NoName {
  components?: ConfigureNuxtComponentAutoRegistration;
  autoImports?: AutoImports;
  imports?: ConfigureHowNuxtAutoImportsComposablesIntoYourApplication;
  pages?: WhetherToUseTheVueRouterIntegrationInNuxt3IfYouDoNotProvideAValueItWillBeEnabledIfYouHaveAPagesDirectoryInYourSourceFolder;
  telemetry?: ManuallyDisableNuxtTelemetry;
  vue?: VueJsConfig;
  app?: NuxtAppConfiguration;
  appTemplatePath?: ThePathToAnHTMLTemplateFileForRenderingNuxtResponsesUsesSrcDirAppHtmlIfItExistsOrTheNuxtSDefaultTemplateIfNot;
  store?: EnableOrDisableVuexStore;
  vueMeta?: OptionsToPassDirectlyToVueMeta;
  head?: SetDefaultConfigurationForHeadOnEveryPage1;
  meta?: Meta;
  fetch?: ConfigurationForTheNuxtFetchHook;
  plugins?: AnArrayOfNuxtAppPlugins;
  extendPlugins?: YouMayWantToExtendPluginsOrChangeTheirOrderForThisYouCanPassAFunctionUsingExtendPluginsItAcceptsAnArrayOfPluginObjectsAndShouldReturnAnArrayOfPluginObjects;
  css?: YouCanDefineTheCSSFilesModulesLibrariesYouWantToSetGloballyIncludedInEveryPage;
  layouts?: AnObjectWhereEachKeyNameMapsToAPathToALayoutVueFile;
  ErrorPage?: SetACustomErrorPageLayout;
  loading?: ConfigureTheNuxtLoadingProgressBarComponentThatSShownBetweenRoutesSetToFalseToDisableYouCanAlsoCustomizeItOrCreateYourOwnComponent;
  loadingIndicator?: ShowALoadingSpinnerWhileThePageIsLoadingOnlyWhenSsrFalse;
  pageTransition?: UsedToSetTheDefaultPropertiesOfThePageTransitions;
  layoutTransition?: UsedToSetTheDefaultPropertiesOfTheLayoutTransitions;
  features?: YouCanDisableSpecificNuxtFeaturesThatYouDoNotWant;
  extends?: ExtendProjectFromMultipleLocalOrRemoteSources;
  theme?: ExtendProjectFromALocalOrRemoteSource;
  rootDir?: DefineTheRootDirectoryOfYourApplication;
  workspaceDir?: DefineTheWorkspaceDirectoryOfYourApplication;
  srcDir?: DefineTheSourceDirectoryOfYourNuxtApplication;
  buildDir?: DefineTheDirectoryWhereYourBuiltNuxtFilesWillBePlaced;
  dev?: WhetherNuxtIsRunningInDevelopmentMode;
  test?: WhetherYourAppIsBeingUnitTested;
  debug?: SetToTrueToEnableDebugMode;
  env?: TheEnvPropertyDefinesEnvironmentVariablesThatShouldBeAvailableThroughoutYourAppServerAndClientSideTheyCanBeAssignedUsingServerSideEnvironmentVariables;
  createRequire?: SetTheMethodNuxtUsesToRequireModulesSuchAsLoadingNuxtConfigServerMiddlewareAndSoOnDefaultingToJitiWhichHasSupportForTypeScriptAndESMSyntax;
  target?: WhetherYourNuxtAppShouldBeBuiltToBeServedByTheNuxtServerServerOrAsStaticHTMLFilesSuitableForACDNOrOtherStaticFileServerStatic;
  ssr?: WhetherToEnableRenderingOfHTMLEitherDynamicallyInServerModeOrAtGenerateTimeIfSetToFalseAndCombinedWithStaticTargetGeneratedPagesWillSimplyDisplayALoadingScreenWithNoContent;
  mode?: Mode;
  modern?: WhetherToProduceASeparateModernBuildTargetingBrowsersThatSupportESModules;
  modules?: ModulesAreNuxtExtensionsWhichCanExtendItsCoreFunctionalityAndAddEndlessIntegrations;
  buildModules?: ModulesThatAreOnlyRequiredDuringDevelopmentAndBuildTime;
  _modules?: BuiltInAdHocModules;
  _installedModules?: InstalledModuleMetadata;
  globalName?: AllowsCustomizingTheGlobalIDUsedInTheMainHTMLTemplateAsWellAsTheMainVueInstanceNameAndOtherOptions;
  globals?: CustomizesSpecificGlobalNamesTheyAreBasedOnGlobalNameByDefault;
  serverMiddleware?: ServerMiddlewareAreConnectExpressH3ShapedFunctionsThatHandleServerSideRequestsTheyRunOnTheServerAndBeforeTheVueRenderer;
  modulesDir?: UsedToSetTheModulesDirectoriesForPathResolvingForExampleWebpackSResolveLoadingNodeExternalsAndPostcss;
  dir?: CustomizeDefaultDirectoryStructureUsedByNuxt;
  extensions?: TheExtensionsThatShouldBeResolvedByTheNuxtResolver;
  styleExtensions?: TheStyleExtensionsThatShouldBeResolvedByTheNuxtResolverForExampleInCssProperty;
  alias?: YouCanImproveYourDXByDefiningAdditionalAliasesToAccessCustomDirectoriesWithinYourJavaScriptAndCSS;
  ignoreOptions?: PassOptionsDirectlyToNodeIgnoreWhichIsUsedByNuxtToIgnoreFiles;
  ignorePrefix?: AnyFileInPagesLayoutsMiddlewareOrStoreWillBeIgnoredDuringBuildingIfItsFilenameStartsWithThePrefixSpecifiedByIgnorePrefix;
  ignore?: MoreCustomizableThanIgnorePrefixAllFilesMatchingGlobPatternsSpecifiedInsideTheIgnoreArrayWillBeIgnoredInBuilding;
  watch?: TheWatchPropertyLetsYouWatchCustomFilesForRestartingTheServer;
  watchers?: TheWatchersPropertyLetsYouOverwriteWatchersConfigurationInYourNuxtConfig;
  editor?: YourPreferredCodeEditorToLaunchWhenDebugging;
  hooks?: HooksAreListenersToNuxtEventsThatAreTypicallyUsedInModulesButAreAlsoAvailableInNuxtConfig;
  runtimeConfig?: RuntimeConfigAllowsPassingDynamicConfigAndEnvironmentVariablesToTheNuxtAppContext;
  privateRuntimeConfig?: PrivateRuntimeConfig;
  publicRuntimeConfig?: PublicRuntimeConfig;
  appConfig?: AdditionalAppConfiguration;
  _majorVersion?: MajorVersion;
  _legacyGenerate?: LegacyGenerate;
  _start?: Start;
  _build?: Build;
  _generate?: Generate;
  _prepare?: Prepare;
  _cli?: Cli;
  _requiredModules?: RequiredModules;
  _nuxtConfigFile?: NuxtConfigFile;
  _nuxtConfigFiles?: NuxtConfigFiles;
  appDir?: AppDir;
  postcss?: Postcss;
  typescript?: ConfigurationForNuxtSTypeScriptIntegration;
  vite?: ConfigurationThatWillBePassedDirectlyToVite;
  webpack?: Webpack;
  nitro?: ConfigurationForNitro;
  serverHandlers?: NitroServerHandlers;
  devServerHandlers?: NitroDevelopmentOnlyServerHandlers;
  experimental?: Experimental;
  builder?: TheBuilderToUseForBundlingTheVuePartOfYourApplication;
  sourcemap?: WhetherToGenerateSourcemaps;
  build?: SharedBuildConfiguration;
  messages?: Messages;
  render?: Render;
  router?: Router;
  server?: Server;
  cli?: Cli1;
  generate?: Generate1;
  [k: string]: unknown;
}
export interface VueJsConfig {
  config?: PropertiesThatWillBeSetDirectlyOnVueConfigForVue2;
  compilerOptions?: OptionsForTheVueCompilerThatWillBePassedAtBuildTime;
  [k: string]: unknown;
}
export interface NuxtAppConfiguration {
  baseURL?: TheBasePathOfYourNuxtApplication;
  buildAssetsDir?: TheFolderNameForTheBuiltSiteAssetsRelativeToBaseURLOrCdnURLIfSetThisIsSetAtBuildTimeAndShouldNotBeCustomizedAtRuntime;
  assetsPath?: TheFolderNameForTheBuiltSiteAssetsRelativeToBaseURLOrCdnURLIfSet;
  cdnURL?: AnAbsoluteURLToServeThePublicFolderFromProductionOnly;
  head?: SetDefaultConfigurationForHeadOnEveryPage;
  layoutTransition?: DefaultValuesForLayoutTransitions;
  pageTransition?: DefaultValuesForPageTransitions;
  keepalive?: DefaultValuesForKeepAliveConfigurationBetweenPages;
  [k: string]: unknown;
}
export interface ConfigurationForTheNuxtFetchHook {
  server?: WhetherToEnableFetchOnTheServer;
  client?: WhetherToEnableFetchOnTheClient;
  [k: string]: unknown;
}
export interface ConfigureTheNuxtLoadingProgressBarComponentThatSShownBetweenRoutesSetToFalseToDisableYouCanAlsoCustomizeItOrCreateYourOwnComponent {
  color?: CSSColorOfTheProgressBar;
  failedColor?: CSSColorOfTheProgressBarWhenAnErrorAppendedWhileRenderingTheRouteIfDataOrFetchSentBackAnErrorForExample;
  height?: HeightOfTheProgressBarUsedInTheStylePropertyOfTheProgressBar;
  throttle?: InMsWaitForTheSpecifiedTimeBeforeDisplayingTheProgressBarUsefulForPreventingTheBarFromFlashing;
  duration?: InMsTheMaximumDurationOfTheProgressBarNuxtAssumesThatTheRouteWillBeRenderedBefore5Seconds;
  continuous?: KeepAnimatingProgressBarWhenLoadingTakesLongerThanDuration;
  rtl?: SetTheDirectionOfTheProgressBarFromRightToLeft;
  css?: SetToFalseToRemoveDefaultProgressBarStylesAndAddYourOwn;
  [k: string]: unknown;
}
/**
 * Set to `false` to disable. Alternatively, you can pass a string name or an object for more configuration. The name can refer to an indicator from [SpinKit](https://tobiasahlin.com/spinkit/) or a path to an HTML template of the indicator source code (in this case, all the other options will be passed to the template).
 */
export interface ShowALoadingSpinnerWhileThePageIsLoadingOnlyWhenSsrFalse {
  [k: string]: unknown;
}
/**
 * You can either pass a string (the transition name) or an object with properties to bind to the `<Transition>` component that will wrap your pages.
 */
export interface UsedToSetTheDefaultPropertiesOfThePageTransitions {
  [k: string]: unknown;
}
/**
 * You can either pass a string (the transition name) or an object with properties to bind to the `<Transition>` component that will wrap your layouts.
 */
export interface UsedToSetTheDefaultPropertiesOfTheLayoutTransitions {
  [k: string]: unknown;
}
export interface YouCanDisableSpecificNuxtFeaturesThatYouDoNotWant {
  store?: SetToFalseToDisableNuxtVuexIntegration;
  layouts?: SetToFalseToDisableLayouts;
  meta?: SetToFalseToDisableNuxtIntegrationWithVueMetaAndTheHeadProperty;
  middleware?: SetToFalseToDisableMiddleware;
  transitions?: SetToFalseToDisableTransitions;
  deprecations?: SetToFalseToDisableSupportForDeprecatedFeaturesAndAliases;
  validate?: SetToFalseToDisableTheNuxtValidateHook;
  useAsyncData?: SetToFalseToDisableTheNuxtAsyncDataHook;
  fetch?: SetToFalseToDisableTheNuxtFetchHook;
  clientOnline?: SetToFalseToDisable$NuxtIsOnline;
  clientPrefetch?: SetToFalseToDisablePrefetchingBehaviorInNuxtLink;
  componentAliases?: SetToFalseToDisableExtraComponentAliasesLikeNLinkAndNChild;
  componentClientOnly?: SetToFalseToDisableTheClientOnlyComponentSeeDocsHttpsGithubComEgoistVueClientOnly;
  [k: string]: unknown;
}
export interface TheEnvPropertyDefinesEnvironmentVariablesThatShouldBeAvailableThroughoutYourAppServerAndClientSideTheyCanBeAssignedUsingServerSideEnvironmentVariables {
  [k: string]: unknown;
}
export interface CustomizesSpecificGlobalNamesTheyAreBasedOnGlobalNameByDefault {
  id?: GlobalsId;
  nuxt?: GlobalsNuxt;
  context?: GlobalsContext;
  pluginPrefix?: GlobalsPluginPrefix;
  readyCallback?: GlobalsReadyCallback;
  loadedCallback?: GlobalsLoadedCallback;
  [k: string]: unknown;
}
/**
 * It is better to stick with defaults unless needed.
 */
export interface CustomizeDefaultDirectoryStructureUsedByNuxt {
  assets?: TheAssetsDirectoryAliasedAsAssetsInYourBuild;
  app?: TheDirectoryContainingAppTemplateFilesLikeAppHtmlAndRouterScrollBehaviorJs;
  layouts?: TheLayoutsDirectoryEachFileOfWhichWillBeAutoRegisteredAsANuxtLayout;
  middleware?: TheMiddlewareDirectoryEachFileOfWhichWillBeAutoRegisteredAsANuxtMiddleware;
  pages?: TheDirectoryWhichWillBeProcessedToAutoGenerateYourApplicationPageRoutes;
  public?: TheDirectoryContainingYourStaticFilesWhichWillBeDirectlyAccessibleViaTheNuxtServerAndCopiedAcrossIntoYourDistFolderWhenYourAppIsGenerated;
  static?: DirStatic;
  store?: TheFolderWhichWillBeUsedToAutoGenerateYourVuexStoreStructure;
  [k: string]: unknown;
}
export interface TheWatchersPropertyLetsYouOverwriteWatchersConfigurationInYourNuxtConfig {
  rewatchOnRawEvents?: AnArrayOfEventTypesWhichWhenReceivedWillCauseTheWatcherToRestart;
  webpack?: WatchOptionsToPassDirectlyToWebpack;
  chokidar?: OptionsToPassDirectlyToChokidar;
  [k: string]: unknown;
}
export interface WatchOptionsToPassDirectlyToWebpack {
  aggregateTimeout?: number;
  [k: string]: unknown;
}
export interface OptionsToPassDirectlyToChokidar {
  ignoreInitial?: boolean;
  [k: string]: unknown;
}
export interface Postcss {
  config?: PathToPostcssConfigFile;
  plugins?: OptionsForConfiguringPostCSSPlugins;
  [k: string]: unknown;
}
export interface ConfigurationForNuxtSTypeScriptIntegration {
  strict?: TypeScriptComesWithCertainChecksToGiveYouMoreSafetyAndAnalysisOfYourProgramOnceYouVeConvertedYourCodebaseToTypeScriptYouCanStartEnablingTheseChecksForGreaterSafetyReadMoreHttpsWwwTypescriptlangOrgDocsHandbookMigratingFromJavascriptHtmlGettingStricterChecks;
  typeCheck?: EnableBuildTimeTypeChecking;
  tsConfig?: YouCanExtendGeneratedNuxtTsconfigJsonUsingThisOption;
  shim?: GenerateAVueShim;
  [k: string]: unknown;
}
export interface Webpack {
  analyze?: NuxtUsesWebpackBundleAnalyzerToVisualizeYourBundlesAndHowToOptimizeThem;
  profile?: EnableTheProfilerInWebpackbar;
  extractCSS?: EnablesCommonCSSExtractionUsingVueServerRendererGuidelinesHttpsSsrVuejsOrgGuideCssHtml;
  cssSourceMap?: EnablesCSSSourceMapSupportDefaultsToTrueInDevelopment;
  serverURLPolyfill?: ThePolyfillLibraryToLoadToProvideURLAndURLSearchParams;
  filenames?: CustomizeBundleFilenames;
  loaders?: CustomizeTheOptionsOfNuxtSIntegratedWebpackLoaders;
  plugins?: AddWebpackPlugins;
  terser?: TerserPluginOptions;
  aggressiveCodeRemoval?: HardReplacesTypeofProcessTypeofWindowAndTypeofDocumentToTreeShakeBundle;
  optimizeCSS?: OptimizeCSSAssetsPluginOptions;
  optimization?: ConfigureWebpackOptimizationHttpsWebpackJsOrgConfigurationOptimization;
  postcss?: CustomizePostCSSLoaderSameOptionsAsHttpsGithubComWebpackContribPostcssLoaderOptions;
  devMiddleware?: SeeWebpackDevMiddlewareHttpsGithubComWebpackWebpackDevMiddlewareForAvailableOptions;
  hotMiddleware?: SeeWebpackHotMiddlewareHttpsGithubComWebpackContribWebpackHotMiddlewareForAvailableOptions;
  friendlyErrors?: SetToFalseToDisableTheOverlayProvidedByFriendlyErrorsWebpackPluginHttpsGithubComNuxtFriendlyErrorsWebpackPlugin;
  warningIgnoreFilters?: FiltersToHideBuildWarnings;
  [k: string]: unknown;
}
/**
 * To understand a bit more about the use of manifests, take a look at [this webpack documentation](https://webpack.js.org/guides/code-splitting/).
 */
export interface CustomizeBundleFilenames {
  app?: {
    [k: string]: unknown;
  };
  chunk?: {
    [k: string]: unknown;
  };
  css?: {
    [k: string]: unknown;
  };
  img?: {
    [k: string]: unknown;
  };
  font?: {
    [k: string]: unknown;
  };
  video?: {
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
export interface CustomizeTheOptionsOfNuxtSIntegratedWebpackLoaders {
  file?: WebpackLoadersFile;
  fontUrl?: WebpackLoadersFontUrl;
  imgUrl?: WebpackLoadersImgUrl;
  pugPlain?: WebpackLoadersPugPlain;
  vue?: WebpackLoadersVue;
  css?: WebpackLoadersCss;
  cssModules?: WebpackLoadersCssModules;
  less?: WebpackLoadersLess;
  sass?: WebpackLoadersSass;
  scss?: WebpackLoadersScss;
  stylus?: WebpackLoadersStylus;
  vueStyle?: WebpackLoadersVueStyle;
  [k: string]: unknown;
}
export interface WebpackLoadersFile {
  esModule?: boolean;
  [k: string]: unknown;
}
export interface WebpackLoadersFontUrl {
  esModule?: boolean;
  limit?: number;
  [k: string]: unknown;
}
export interface WebpackLoadersImgUrl {
  esModule?: boolean;
  limit?: number;
  [k: string]: unknown;
}
export interface WebpackLoadersVue {
  productionMode?: WebpackLoadersVueProductionMode;
  transformAssetUrls?: WebpackLoadersVueTransformAssetUrls;
  compilerOptions?: WebpackLoadersVueCompilerOptions;
  [k: string]: unknown;
}
export interface WebpackLoadersVueTransformAssetUrls {
  video?: string;
  source?: string;
  object?: string;
  embed?: string;
  [k: string]: unknown;
}
export interface WebpackLoadersVueCompilerOptions {
  [k: string]: unknown;
}
export interface WebpackLoadersCss {
  importLoaders?: number;
  url?: WebpackLoadersCssUrl;
  esModule?: boolean;
  [k: string]: unknown;
}
export interface WebpackLoadersCssUrl {
  filter?: {
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
export interface WebpackLoadersCssModules {
  importLoaders?: number;
  url?: WebpackLoadersCssModulesUrl;
  esModule?: boolean;
  modules?: WebpackLoadersCssModulesModules;
  [k: string]: unknown;
}
export interface WebpackLoadersCssModulesUrl {
  filter?: {
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
export interface WebpackLoadersCssModulesModules {
  localIdentName?: string;
  [k: string]: unknown;
}
export interface WebpackLoadersSass {
  sassOptions?: WebpackLoadersSassSassOptions;
  [k: string]: unknown;
}
export interface WebpackLoadersSassSassOptions {
  indentedSyntax?: boolean;
  [k: string]: unknown;
}
export interface CustomizePostCSSLoaderSameOptionsAsHttpsGithubComWebpackContribPostcssLoaderOptions {
  execute?: unknown;
  postcssOptions?: WebpackPostcssPostcssOptions;
  sourceMap?: unknown;
  implementation?: unknown;
  order?: string;
  [k: string]: unknown;
}
export interface WebpackPostcssPostcssOptions {
  config?: WebpackPostcssPostcssOptionsConfig;
  plugins?: WebpackPostcssPostcssOptionsPlugins;
  [k: string]: unknown;
}
export interface WebpackPostcssPostcssOptionsPlugins {
  [k: string]: unknown;
}
export interface Experimental {
  asyncEntry?: SetToTrueToGenerateAnAsyncEntryPointForTheVueBundleForModuleFederationSupport;
  reactivityTransform?: EnableVueSReactivityTransform;
  externalVue?: ExternalizeVueVueAndVueRouterWhenBuilding;
  treeshakeClientOnly?: TreeShakesContentsOfClientOnlyComponentsFromServerBundle;
  viteNode?: UseViteNodeForOnDemandServerChunkLoading;
  viteServerDynamicImports?: SplitServerBundleIntoMultipleChunksAndDynamicallyImportThem;
  inlineSSRStyles?: InlineStylesWhenRenderingHTMLCurrentlyViteOnly;
  noScripts?: TurnOffRenderingOfNuxtScriptsAndJSResourceHints;
  [k: string]: unknown;
}
export interface SharedBuildConfiguration {
  quiet?: SuppressesMostOfTheBuildOutputLog;
  analyze?: NuxtUsesWebpackBundleAnalyzerToVisualizeYourBundlesAndHowToOptimizeThem1;
  profile?: EnableTheProfilerInWebpackbar1;
  extractCSS?: EnablesCommonCSSExtractionUsingVueServerRendererGuidelinesHttpsSsrVuejsOrgGuideCssHtml1;
  cssSourceMap?: EnablesCSSSourceMapSupportDefaultsToTrueInDevelopment1;
  ssr?: CreatesSpecialWebpackBundleForSSRRendererItIsNormallyNotNecessaryToChangeThisValue;
  parallel?: EnableThreadLoaderHttpsGithubComWebpackContribThreadLoaderThreadLoaderWhenBuildingAppWithWebpack;
  cache?: EnableCachingForTerserWebpackPluginHttpsGithubComWebpackContribTerserWebpackPluginOptionsAndCacheLoaderHttpsGithubComWebpackContribCacheLoaderCacheLoader;
  standalone?: InlineServerBundleDependencies;
  publicPath?: IfYouAreUploadingYourDistFilesToACDNYouCanSetThePublicPathToYourCDN;
  serverURLPolyfill?: ThePolyfillLibraryToLoadToProvideURLAndURLSearchParams1;
  filenames?: CustomizeBundleFilenames1;
  loaders?: CustomizeTheOptionsOfNuxtSIntegratedWebpackLoaders1;
  styleResources?: BuildStyleResources;
  plugins?: AddWebpackPlugins1;
  terser?: TerserPluginOptions1;
  hardSource?: EnablesTheHardSourceWebpackPluginHttpsGithubComMzgoddardHardSourceWebpackPluginForImprovedCaching;
  aggressiveCodeRemoval?: HardReplacesTypeofProcessTypeofWindowAndTypeofDocumentToTreeShakeBundle1;
  optimizeCSS?: OptimizeCSSAssetsPluginOptions1;
  optimization?: ConfigureWebpackOptimizationHttpsWebpackJsOrgConfigurationOptimization1;
  splitChunks?: WhetherToSplitCodeForLayoutPagesAndCommonsChunks;
  corejs?: NuxtWillAutomaticallyDetectTheCurrentVersionOfCoreJsInYourProjectAutoOrYouCanSpecifyWhichVersionYouWantToUse2Or3;
  babel?: CustomizeYourBabelConfiguration;
  transpile?: IfYouWantToTranspileSpecificDependenciesWithBabelYouCanAddThemHereEachItemInTranspileCanBeAPackageNameAFunctionAStringOrRegexObjectMatchingTheDependencySFileName;
  postcss?: CustomizePostCSSLoaderPluginsSamesOptionsAsHttpsGithubComWebpackContribPostcssLoaderOptions;
  html?: BuildHtml;
  template?: AllowsSettingADifferentAppTemplateOtherThanNuxtVueApp;
  templates?: YouCanProvideYourOwnTemplatesWhichWillBeRenderedBasedOnNuxtConfigurationThisFeatureIsSpeciallyUsefulForUsingWithModules;
  watch?: YouCanProvideYourCustomFilesToWatchAndRegenerateAfterChanges;
  devMiddleware?: SeeWebpackDevMiddlewareHttpsGithubComWebpackWebpackDevMiddlewareForAvailableOptions1;
  hotMiddleware?: SeeWebpackHotMiddlewareHttpsGithubComWebpackContribWebpackHotMiddlewareForAvailableOptions1;
  vendor?: BuildVendor;
  stats?: SetToNoneOrFalseToDisableStatsPrintingOutAfterABuild;
  friendlyErrors?: SetToFalseToDisableTheOverlayProvidedByFriendlyErrorsWebpackPluginHttpsGithubComNuxtFriendlyErrorsWebpackPlugin1;
  additionalExtensions?: AdditionalExtensionsBeyondVueJsToSupportInPagesLayoutsMiddlewareEtc;
  warningIgnoreFilters?: FiltersToHideBuildWarnings1;
  followSymlinks?: SetToTrueToScanFilesWithinSymlinksInTheBuildSuchAsWithinPages;
  [k: string]: unknown;
}
export interface EnablesCSSSourceMapSupportDefaultsToTrueInDevelopment1 {
  [k: string]: unknown;
}
export interface CustomizeTheOptionsOfNuxtSIntegratedWebpackLoaders1 {
  file?: BuildLoadersFile;
  fontUrl?: BuildLoadersFontUrl;
  imgUrl?: BuildLoadersImgUrl;
  pugPlain?: BuildLoadersPugPlain;
  vue?: BuildLoadersVue;
  css?: BuildLoadersCss;
  cssModules?: BuildLoadersCssModules;
  less?: BuildLoadersLess;
  sass?: BuildLoadersSass;
  scss?: BuildLoadersScss;
  stylus?: BuildLoadersStylus;
  vueStyle?: BuildLoadersVueStyle;
  [k: string]: unknown;
}
export interface BuildLoadersFile {
  esModule?: boolean;
  [k: string]: unknown;
}
export interface BuildLoadersFontUrl {
  esModule?: boolean;
  limit?: number;
  [k: string]: unknown;
}
export interface BuildLoadersImgUrl {
  esModule?: boolean;
  limit?: number;
  [k: string]: unknown;
}
export interface BuildLoadersVue {
  productionMode?: BuildLoadersVueProductionMode;
  transformAssetUrls?: BuildLoadersVueTransformAssetUrls;
  compilerOptions?: BuildLoadersVueCompilerOptions;
  [k: string]: unknown;
}
export interface BuildLoadersVueTransformAssetUrls {
  video?: string;
  source?: string;
  object?: string;
  embed?: string;
  [k: string]: unknown;
}
export interface BuildLoadersVueCompilerOptions {
  [k: string]: unknown;
}
export interface BuildLoadersCss {
  importLoaders?: number;
  esModule?: boolean;
  [k: string]: unknown;
}
export interface BuildLoadersCssModules {
  importLoaders?: number;
  esModule?: boolean;
  modules?: BuildLoadersCssModulesModules;
  [k: string]: unknown;
}
export interface BuildLoadersCssModulesModules {
  localIdentName?: string;
  [k: string]: unknown;
}
export interface BuildLoadersSass {
  sassOptions?: BuildLoadersSassSassOptions;
  [k: string]: unknown;
}
export interface BuildLoadersSassSassOptions {
  indentedSyntax?: boolean;
  [k: string]: unknown;
}
export interface ConfigureWebpackOptimizationHttpsWebpackJsOrgConfigurationOptimization1 {
  runtimeChunk?: string;
  minimize?: SetMinimizeToFalseToDisableAllMinimizersItIsDisabledInDevelopmentByDefault;
  minimizer?: YouCanSetMinimizerToACustomizedArrayOfPlugins;
  splitChunks?: BuildOptimizationSplitChunks;
  [k: string]: unknown;
}
export interface BuildOptimizationSplitChunks {
  chunks?: string;
  automaticNameDelimiter?: string;
  cacheGroups?: BuildOptimizationSplitChunksCacheGroups;
  [k: string]: unknown;
}
/**
 * Commons libs include `vue`, `vue-loader`, `vue-router`, `vuex`, etc.
 */
export interface WhetherToSplitCodeForLayoutPagesAndCommonsChunks {
  layouts?: boolean;
  pages?: boolean;
  commons?: boolean;
  [k: string]: unknown;
}
/**
 * See [babel-loader options](https://github.com/babel/babel-loader#options) and [babel options](https://babeljs.io/docs/en/options).
 */
export interface CustomizeYourBabelConfiguration {
  configFile?: boolean;
  babelrc?: boolean;
  plugins?: AnArrayOfBabelPluginsToLoadOrAFunctionThatTakesWebpackContextAndReturnsAnArrayOfBabelPlugins;
  presets?: TheBabelPresetsToBeApplied;
  cacheDirectory?: BuildBabelCacheDirectory;
  [k: string]: unknown;
}
export interface CustomizePostCSSLoaderPluginsSamesOptionsAsHttpsGithubComWebpackContribPostcssLoaderOptions {
  execute?: unknown;
  postcssOptions?: BuildPostcssPostcssOptions;
  sourcemap?: unknown;
  implementation?: unknown;
  order?: string;
  [k: string]: unknown;
}
export interface BuildPostcssPostcssOptions {
  [k: string]: unknown;
}
export interface BuildHtml {
  minify?: ConfigurationForTheHtmlMinifierPluginUsedToMinifyHTMLFilesCreatedDuringTheBuildProcessWillBeAppliedForAllModes;
  [k: string]: unknown;
}
export interface ConfigurationForTheHtmlMinifierPluginUsedToMinifyHTMLFilesCreatedDuringTheBuildProcessWillBeAppliedForAllModes {
  collapseBooleanAttributes?: boolean;
  decodeEntities?: boolean;
  minifyCSS?: boolean;
  minifyJS?: boolean;
  processConditionalComments?: boolean;
  removeEmptyAttributes?: boolean;
  removeRedundantAttributes?: boolean;
  trimCustomFragments?: boolean;
  useShortDoctype?: boolean;
  [k: string]: unknown;
}
export interface SeeWebpackDevMiddlewareHttpsGithubComWebpackWebpackDevMiddlewareForAvailableOptions1 {
  stats?: string;
  [k: string]: unknown;
}
export interface BuildVendor {
  $meta?: BuildVendor$Meta;
  [k: string]: unknown;
}
export interface BuildVendor$Meta {
  deprecated?: string;
  [k: string]: unknown;
}
export interface SetToNoneOrFalseToDisableStatsPrintingOutAfterABuild {
  excludeAssets?: {
    [k: string]: unknown;
  }[];
  [k: string]: unknown;
}
export interface Messages {
  loading?: TheTextThatDisplaysOnTheNuxtLoadingIndicatorWhenSsrFalse;
  error_404?: The404TextOnTheDefaultNuxtErrorPage;
  server_error?: TheTextToDisplayOnTheDefaultNuxtErrorPageWhenThereHasBeenAServerError;
  nuxtjs?: TheTextLinkedToNuxtjsOrgThatAppearsOnTheBuiltInNuxtErrorPage;
  back_to_home?: TheTextLinkedToTheHomePageThatAppearsOnTheBuiltInNuxtErrorPage;
  server_error_details?: TheMessageThatWillDisplayOnAWhiteScreenIfTheBuiltInNuxtErrorPageCanTBeRendered;
  client_error?: TheDefaultErrorTitleIfThereIsnTASpecificErrorMessageOnTheBuiltInNuxtErrorPage;
  client_error_details?: TheErrorMessageInDebugModeOnTheBuiltInNuxtErrorPage;
  [k: string]: unknown;
}
export interface Render {
  bundleRenderer?: UseThisOptionToCustomizeTheVueSSRBundleRendererThisOptionIsSkippedIfSsrFalse;
  crossorigin?: ConfigureTheCrossoriginAttributeOnLinkRelStylesheetAndScriptTagsInGeneratedHTMLMoreInformationHttpsDeveloperMozillaOrgEnUSDocsWebHTMLAttributesCrossorigin;
  resourceHints?: AddsPrefetchAndPreloadLinksForFasterInitialPageLoadTimeYouProbablyDonTWantToDisableThisOptionUnlessYouHaveManyPagesAndRoutes;
  ssr?: WhetherToEnableRenderingOfHTMLEitherDynamicallyInServerModeOrAtGenerateTime;
  ssrLog?: ForwardServerSideLogsToTheBrowserForBetterDebuggingOnlyAvailableInDevelopment;
  http2?: ConfigurationForHTTP2PushHeaders;
  static?: ConfigureTheBehaviorOfTheStaticDirectory;
  compressor?: ConfigureServerCompression;
  etag?: ToDisableEtagForPagesSetEtagFalseSeeEtagDocsHttpsGithubComJshttpEtagForPossibleOptionsYouCanUseYourOwnHashFunctionBySpecifyingEtagHash;
  csp?: UseThisToConfigureContentSecurityPolicyToLoadExternalResourcesReadMoreHttpsDeveloperMozillaOrgEnUSDocsWebHTTPCSP;
  dist?: OptionsUsedForServingDistributionFilesOnlyApplicableInProduction;
  fallback?: ConfigureFallbackBehaviorForServePlaceholderMiddlewareHttpsGithubComNuxtServePlaceholder;
  [k: string]: unknown;
}
/**
 * Read [docs for Vue 2](https://ssr.vuejs.org/api/#renderer-options) here.
 */
export interface UseThisOptionToCustomizeTheVueSSRBundleRendererThisOptionIsSkippedIfSsrFalse {
  shouldPrefetch?: {
    [k: string]: unknown;
  };
  shouldPreload?: {
    [k: string]: unknown;
  };
  runInNewContext?: EnabledByDefaultForDevelopment;
  [k: string]: unknown;
}
export interface ConfigurationForHTTP2PushHeaders {
  push?: SetToTrueToEnableHTTP2PushHeaders;
  shouldPush?: RenderHttp2ShouldPush;
  pushAssets?: YouCanControlWhatLinksToPushUsingThisFunctionItReceivesReqResPublicPathAndAPreloadFilesArray;
  [k: string]: unknown;
}
/**
 * See [serve-static docs](https://github.com/expressjs/serve-static) for possible options.
 */
export interface ConfigureTheBehaviorOfTheStaticDirectory {
  prefix?: WhetherToAddTheRouterBaseToYourStaticAssets;
  [k: string]: unknown;
}
export interface ToDisableEtagForPagesSetEtagFalseSeeEtagDocsHttpsGithubComJshttpEtagForPossibleOptionsYouCanUseYourOwnHashFunctionBySpecifyingEtagHash {
  hash?: boolean;
  weak?: boolean;
  [k: string]: unknown;
}
/**
 * See [serve-static docs](https://www.npmjs.com/package/serve-static) for possible options.
 */
export interface OptionsUsedForServingDistributionFilesOnlyApplicableInProduction {
  index?: boolean;
  maxAge?: string;
  [k: string]: unknown;
}
/**
 * Example of allowing `.js` extension for routing (for example, `/repos/nuxt.js`):
 */
export interface ConfigureFallbackBehaviorForServePlaceholderMiddlewareHttpsGithubComNuxtServePlaceholder {
  dist?: ForRoutesMatchingThePublicPathNuxtDisableBySettingToFalse;
  static?: ForAllOtherRoutesDisableBySettingToFalse;
  [k: string]: unknown;
}
export interface ForAllOtherRoutesDisableBySettingToFalse {
  skipUnknown?: boolean;
  handlers?: RenderFallbackStaticHandlers;
  [k: string]: unknown;
}
export interface RenderFallbackStaticHandlers {
  ".htm"?: boolean;
  ".html"?: boolean;
  [k: string]: unknown;
}
export interface Router {
  options?: AdditionalOptionsPassedToVueRouter;
  mode?: ConfigureTheRouterMode;
  base?: TheBaseURLOfTheAppForExampleIfTheEntireSinglePageApplicationIsServedUnderAppThenBaseShouldUseTheValueApp;
  _routerBaseSpecified?: RouterRouterBaseSpecified;
  routes?: RouterRoutes;
  routeNameSplitter?: ThisAllowsChangingTheSeparatorBetweenRouteNamesThatNuxtUses;
  middleware?: SetTheDefaultSMiddlewareForEveryPageOfTheApplication;
  linkActiveClass?: GloballyConfigureNuxtLinkDefaultActiveClass;
  linkExactActiveClass?: GloballyConfigureNuxtLinkDefaultExactActiveClass;
  linkPrefetchedClass?: GloballyConfigureNuxtLinkDefaultPrefetchClassFeatureDisabledByDefault;
  extendRoutes?: YouCanPassAFunctionToExtendTheRoutesCreatedByNuxt;
  scrollBehavior?: TheScrollBehaviorOptionLetsYouDefineACustomBehaviorForTheScrollPositionBetweenTheRoutesThisMethodIsCalledEveryTimeAPageIsRenderedToLearnMoreAboutItSeeTheVueRouterDocumentation;
  parseQuery?: ProvideCustomQueryStringParseFunctionOverridesTheDefault;
  stringifyQuery?: ProvideCustomQueryStringStringifyFunctionOverridesTheDefault;
  fallback?: ControlsWhetherTheRouterShouldFallBackToHashModeWhenTheBrowserDoesNotSupportHistoryPushStateButModeIsSetToHistory;
  prefetchLinks?: ConfigureNuxtLinkToPrefetchTheCodeSplittedPageWhenDetectedWithinTheViewportRequiresIntersectionObserverHttpsDeveloperMozillaOrgEnUSDocsWebAPIIntersection_Observer_APIToBeSupportedSeeCaniuseHttpsCaniuseComIntersectionobserver;
  prefetchPayloads?: WhenUsingNuxtGenerateWithTargetStaticNuxtWillGenerateAPayloadJsForEachPage;
  trailingSlash?: IfThisOptionIsSetToTrueTrailingSlashesWillBeAppendedToEveryRouteIfSetToFalseTheyLlBeRemoved;
  [k: string]: unknown;
}
export interface Server {
  https?: WhetherToEnableHTTPS;
  port?: ServerPort;
  host?: ServerHost;
  socket?: ServerSocket;
  timing?: EnablingTimingAddsAMiddlewareToMeasureTheTimeElapsedDuringServerSideRenderingAndAddsItToTheHeadersAsServerTiming;
  [k: string]: unknown;
}
/**
 * Apart from true/false, this can be an object for providing options. Currently, only `total` is supported (which directly tracks the whole time spent on server-side rendering.
 */
export interface EnablingTimingAddsAMiddlewareToMeasureTheTimeElapsedDuringServerSideRenderingAndAddsItToTheHeadersAsServerTiming {
  [k: string]: unknown;
}
export interface Cli1 {
  badgeMessages?: AddAMessageToTheCLIBannerByAddingAStringToThisArray;
  bannerColor?: ChangeTheColorOfTheNuxtJsTitleInTheCLIBanner;
  [k: string]: unknown;
}
export interface Generate1 {
  dir?: DirectoryNameThatHoldsAllTheAssetsAndGeneratedPagesForAStaticBuild;
  routes?: TheRoutesToGenerate;
  exclude?: AnArrayOfStringOrRegularExpressionsThatWillPreventGenerationOfRoutesMatchingThemTheRoutesWillStillBeAccessibleWhenFallbackIsSet;
  concurrency?: TheNumberOfRoutesThatAreGeneratedConcurrentlyInTheSameThread;
  interval?: IntervalInMillisecondsBetweenTwoRenderCyclesToAvoidFloodingAPotentialAPIWithCalls;
  subFolders?: SetToFalseToDisableCreatingADirectoryIndexHtmlForEachRoute;
  fallback?: ThePathToTheFallbackHTMLFile;
  crawler?: SetToFalseToDisableGeneratingPagesDiscoveredThroughCrawlingRelativeLinksInGeneratedPages;
  manifest?: SetToFalseToDisableGeneratingAManifestJsWithAListOfAllGeneratedPages;
  nojekyll?: SetToFalseToDisableGeneratingANojekyllFileWhichAidsCompatibilityWithGitHubPages;
  cache?: ConfigureTheCacheUsedWithStaticTargetToAvoidRebuildingWhenNoFilesHaveChanged;
  staticAssets?: GenerateStaticAssets;
  [k: string]: unknown;
}
/**
 * Set to `false` to disable completely.
 */
export interface ConfigureTheCacheUsedWithStaticTargetToAvoidRebuildingWhenNoFilesHaveChanged {
  ignore?: AnArrayOfFilesOrDirectoriesToIgnoreItCanAlsoBeAFunctionThatReturnsAnArray;
  globbyOptions?: OptionsToPassToGlobbyHttpsGithubComSindresorhusGlobbyWhichIsUsedToGenerateASnapshotOfTheSourceFiles;
  [k: string]: unknown;
}
export interface OptionsToPassToGlobbyHttpsGithubComSindresorhusGlobbyWhichIsUsedToGenerateASnapshotOfTheSourceFiles {
  gitignore?: boolean;
  [k: string]: unknown;
}
export interface GenerateStaticAssets {
  dir?: TheDirectoryUnderneathNuxtWhereStaticAssetsPayloadStateAndManifestFilesWillLive;
  base?: TheFullPathToTheDirectoryUnderneathNuxtWhereStaticAssetsPayloadStateAndManifestFilesWillLive;
  versionBase?: TheFullPathToTheVersionedDirectoryWhereStaticAssetsForTheCurrentBuildAreLocated;
  version?: AUniqueStringToUniquelyIdentifyPayloadVersionsDefaultsToTheCurrentTimestamp;
  [k: string]: unknown;
}
